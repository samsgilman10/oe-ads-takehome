// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Partner {
  id                    Int      @id @default(autoincrement())
  name                  String   @db.VarChar(255) @unique
  adTagUrl              String   @db.Text

  categories            Category[]
  questions             Question[]
}

model Category {
  id                    Int      @id @default(autoincrement())
  name                  String   @db.VarChar(255) @unique
  // we don't want to delete categories with questions to maintain referential integrity
  // and visibility so we'll just mark them as inactive
  active                Boolean  @default(true)

  questions             Question[]

  assignedPartner       Partner? @relation(fields: [assignedPartnerId], references: [id], onDelete: Restrict)
  assignedPartnerId     Int?
}

model Question {
  id                    String   @id @db.Uuid
  text                  String   @db.Text
  answer                String?  @db.Text

  // timing fields
  askedAt               DateTime    @default(now())
  // can also use categorizedAt to differentiate between questions where categorization
  // failed and questions that were intentionally left uncategorized
  categorizedAt         DateTime?
  answeredAt            DateTime?

  // maintain a linked list of questions in case we ever want it
  previousQuestionId    String?     @unique @db.Uuid
  previousQuestion      Question?   @relation("QuestionHistory", fields: [previousQuestionId], references: [id], onDelete: Restrict)
  subsequentQuestion    Question?   @relation("QuestionHistory")

  // partner and category that we're serving the ad for, need to store
  // both in case a category changes hands
  partner               Partner?  @relation(fields: [partnerId], references: [id], onDelete: Restrict)
  partnerId             Int?

  category              Category? @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId            Int?
}